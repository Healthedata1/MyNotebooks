{%- macro get_type(j) -%}
{%- for i in sp if i.base == r_type and i.code == j %}[{{i.type}}]{%- endfor %}
{%- endmacro-%}

{%- macro get_mods(j) -%}
{%- if mods[j][0] %}
{%- raw %}{:{% endraw %}{{ mods[j][0] |join('|') }}{% raw %}}{% endraw %}
{%- endif -%}
{%- endmacro-%}

{%- macro get_comps(j) -%}
{%- if mods[j][1] %}
{%- raw %}{{% endraw %}{{ mods[j][1] |join('|') }}{% raw %}}{% endraw %}
{%- endif -%}
{%- endmacro-%}

{#
### Quick Start
Below is an overview of the required set of RESTful FHIR interactions - for
example, search and read operations - for this profile. See the [Conformance requirements]
for a complete list of supported RESTful interactions for this IG.
#}

{%- if shalls %}
#### Mandatory Search Parameters:

The following search parameters, search parameter combinations and search parameter [modifiers], [comparators] and [chained parameters] SHALL be supported.  the  modifiers, comparators and chained parameters that are listed as optional SHOULD be supported.:
{%- endif %}
{%- set nulls = [None,'','n/a'] %}
{%- set ns = namespace(mods=[]) %}
{%- set ns = namespace(comps=[]) %}

{% for i in sp if i.display and i.base_conf == "SHALL" %}
1. **{{i.base_conf}}** {% if i.description not in nulls %}{{i.description}}{% else %}support searching{% endif %} using the **`{{i.code}}`** search parameter:
{%- if i.shall_modifier not in nulls %}
  - including support for these modifiers: `{{ i.shall_modifier.split(',')|join(', ') }}`
{%- endif %}
{%- if i.should_modifier not in nulls %}
{%- if i.shall_modifier not in nulls %}
    - and optional support these modifiers: `{{ i.should_modifier.split(',')|join(', ') }}
{%- else %}
  - including optional support these modifiers: `{{ i.should_modifier.split(',')|join(', ') }}`
{%- endif %}
{%- endif %}
{%- if i.shall_comparator not in nulls %}
  - including support for these comparators: `{{ i.shall_comparator.split(',')|join(', ') }}`
{%- endif %}
{%- if i.should_comparator not in nulls %}
{%- if i.shall_comparator not in nulls %}
    - and optional support these comparators: `{{ i.should_comparator.split(',')|join(', ') }}`
{%- else %}
  - including optional support these comparators: `{{ i.should_comparator.split(',')|join(', ') }}`
{%- endif %}
{%- endif %}
{%- if i.shall_chain not in nulls %}
  - including support for these chained parameters: `{{ i.shall_chain.split(',')|join(', ') }}`
{%- endif %}
{%- if i.should_chain not in nulls %}
{%- if i.shall_chain not in nulls %}
    - and optional support these chained parameter: `{{ i.should_chain.split(',')|join(', ') }}`
{%- else %}
  - including optional support these chained parameter: `{{ i.should_chain.split(',')|join(', ') }}`
{%- endif %}
{%- endif %}

{% if i.code == '_id'%}  `GET [base]/{{i.base}}[id]`{% else %}  `GET [base]/{{i.base}}?{{i.code}}{{get_mods(i.code)}}={{get_comps(i.code)}}{{search_type[i.type]}}`{% endif %}
{% if i.example not in nulls %}
  Example: {{i.example}}
{% endif %}
  *Implementation Notes:* {{i.imp_note}} (how to search by {% if i.code == '_id' %}the [logical id] of the resource{% else %}[{{i.type}}]{% endif %})
{% endfor %}
{%- for i in combos if i.combo_conf == 'SHALL' %}
1. **SHALL** {{i.description}} using the combination of the  **`{{ i.combo.split(',') | join('`** and **`')}}`** search parameters:
  `GET [base]/{{r_type}}?{%- for j in i.combo.split(',') %}{{j + get_mods(j) + '=' + get_comps(j) + get_type(j)}}{%- if not loop.last %}&{% endif %}{%  endfor  %}`
{% if i.example not in nulls %}
  Example: {{i.example}}
{% endif %}
  *Implementation Notes:* {{i.imp_note}} (how to search by [{{ i.combo.split(',') | join('] and [')}}])
{% endfor %}

{% if shoulds %}
#### Optional Search Parameters:

The following search parameters, search parameter combinations and search parameter [modifiers], [comparators] and [chained parameters] SHOULD be supported.
{%- endif %}
{% for i in sp  if i.display and i.base_conf == "SHOULD" %}
1. **{{i.base_conf}}** support searching using the **`{{i.code}}`** search parameter:
{%- if i.shall_modifier not in nulls %}
  - including support for these modifiers: `{{ i.shall_modifier.split(',')|join(', ') }}`
{%- endif %}
{%- if i.should_modifier not in nulls %}
{%- if i.shall_modifier not in nulls %}
    - and optional support these modifiers: `{{ i.should_modifier.split(',')|join(', ') }}
{%- else %}
  - including optional support these modifiers: `{{ i.should_modifier.split(',')|join(', ') }}`
{%- endif %}
{%- endif %}
{%- if i.shall_comparator not in nulls %}
  - including support for these comparators: `{{ i.shall_comparator.split(',')|join(', ') }}`
{%- endif %}
{%- if i.should_comparator not in nulls %}
{%- if i.shall_comparator not in nulls %}
    - and optional support these comparators: `{{ i.should_comparator.split(',')|join(', ') }}`
{%- else %}
  - including optional support these comparators: `{{ i.should_comparator.split(',')|join(', ') }}`
{%- endif %}
{%- endif %}
{%- if i.shall_chain not in nulls %}
  - including support for these chained parameters: `{{ i.shall_chain.split(',')|join(', ') }}`
{%- endif %}
{%- if i.should_chain not in nulls %}
{%- if i.shall_chain not in nulls %}
    - and optional support these chained parameter: `{{ i.should_chain.split(',')|join(', ') }}`
{%- else %}
  - including optional support these chained parameter: `{{ i.should_chain.split(',')|join(', ') }}`
{%- endif %}
{%- endif %}

  `GET [base]/{{i.base}}?{{i.code}}{{get_mods(i.code)}}={{get_comps(i.code)}}{{search_type[i.type]}}`
{%if i.example not in nulls %}
  Example: {{i.example}}
{% endif %}
  *Implementation Notes:* {{i.imp_note}} (how to search by [{{i.type}}])
{% endfor %}
{%- for i in combos if i.combo_conf == 'SHOULD' %}
1. **SHOULD** support searching using the combination of the **`{{ i.combo.split(',') | join('`** and **`')}}`** search parameters:

  `GET [base]/{{r_type}}?{%- for j in i.combo.split(',') %}{{j + get_mods(j) + '=' + get_comps(j) + get_type(j)}}{%- if not loop.last %}&{% endif %}{%  endfor  %}`
{% if i.example not in nulls %}
  Example: {{i.example}}
{% endif %}
  *Implementation Notes:* {{i.imp_note}} (how to search by [{{i.types.split(',') | join('] and [')}}])
{% endfor %}

{% raw %}{% include link-list.md %}{% endraw %}
