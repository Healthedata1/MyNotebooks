
{%- macro get_type(j) -%}
{%- for i in sp if i.base == r_type and i.code == j %}{{search_type[i.type]}}{%- endfor %}
{%- endmacro-%}

{%- macro get_mods(j) -%}
{%- if mods[j][0] %}
{%- raw %}{:{% endraw %}{{ mods[j][0] |join('|') }}{% raw %}}{% endraw %}
{%- endif -%}
{%- endmacro-%}

{%- macro get_comps(j) -%}
{%- if mods[j][1] %}
{%- raw %}{{% endraw %}{{ mods[j][1] |join('|') }}{% raw %}}{% endraw %}
{%- endif -%}
{%- endmacro-%}

{%- macro get_andors(j) -%}
{%- if mods[j][15] %}
{%- raw %}{{% endraw %},{{get_type(j)}},...{% raw %}}{% endraw %}
{%- endif -%}
{%- if mods[j][14] %}
{%- raw %}{{% endraw %}&{{j + get_mods(j) + '=' + get_comps(j) + get_type(j)}}&...{% raw %}}{% endraw %}
{%- endif -%}

{%- endmacro-%}

{%- macro get_conf_mods(j) -%}
{%- if mods[j][2] %}
    - including support for these `{{j}}` modifiers: `{{ mods[j][2]|join(',') }}`
{%- endif %}
{%- if mods[j][3] %}
{%- if mods[j][2] %}
    - and optional support these `{{j}}` modifiers: `{{ mods[j][3]|join(',') }}
{%- else %}
    - including optional support these `{{j}}` modifiers: `{{ mods[j][3]|join(',') }}`
{%- endif %}
{%- endif %}
{%- if mods[j][4] %}
    - including support for these `{{j}}` comparators: `{{ mods[j][4]|join(',') }}`
{%- endif %}
{%- if mods[j][5] %}
{%- if mods[j][4] %}
    - and optional support these `{{j}}` comparators: `{{ mods[j][5]|join(',') }}`
{%- else %}
    - including optional support these `{{j}}` comparators: `{{ mods[j][5]|join(',') }}`
{%- endif %}
{%- endif %}
{%- if mods[j][6] %}
    - including support for these chained parameters: `{{j + '.' +   mods[j][6]|join(',{0}.'.format(j)) }}`
{%- endif %}
{%- if mods[j][7] %}
{%- if mods[j][6] %}
    - and optional support these chained parameter: `{{j + '.' +   mods[j][6]|join(',{0}.'.format(j)) }}`
{%- else %}
    - including optional support these chained parameter: `{{j + '.' +   mods[j][6]|join(',{0}.'.format(j)) }}`
{%- endif %}
{%- endif %}
{%- if mods[j][8] %}
    - including support for these `_include` parameters: `{{ mods[j][8]|join(',') }}`
{%- endif %}
{%- if mods[j][9] %}
{%- if mods[j][8] %}
    - and optional support for these `_include` parameters: `{{ mods[j][9]|join(',') }}`
{%- else %}
    - including optional support for these `_include` parameters: `{{ mods[j][9]|join(',') }}`
{%- endif %}
{%- endif %}
{%- if mods[j][10] %}
    -  including support for *AND* search on `{{j}}` (e.g.`{{j}}={{get_type(j)}}&{{j}}={{get_type(j)}}`)
{%- endif %}
{%- if mods[j][11] %}
    - including optional support for *AND* search on `{{j}}` (e.g.`{{j}}={{get_type(j)}}&{{j}}={{get_type(j)}}]&...`)
{%- endif %}
{%- if mods[j][12] %}
    - including support for *OR* search on `{{j}}` (e.g.`{{j}}={{get_type(j)}},{{get_type(j)}},...`)
{%- endif %}
{%- if mods[j][13] %}
    - including optional support for *OR* search on `{{j}}` (e.g.`{{j}}={{get_type(j)}},{{get_type(j)}},...`)
{%- endif %}
{%- endmacro %}

<!-- Source = {{ig_source_path}}. This file is generated by SearchParameterMakerR4.ipynb Do not edit directly. -->

{%- raw %}{% include quickstart-intro.md %}{% endraw %}

{% if shalls %}
#### Mandatory Search Parameters:

The following search parameters and search parameter combinations SHALL be supported:
{%- endif %}
{%- set nulls = [None,'','n/a'] %}
{%- set ns = namespace(mods=[]) %}
{%- set ns = namespace(comps=[]) %}

{% for i in sp if i.display and i.base_conf == "SHALL" %}
1. {% if i.is_new %}{% raw %}{:.new-content}{% endraw %}{% endif %}**SHALL** {% if i.description not in nulls %}{{i.description}}{% else %}support searching{% endif %} using the **[`{{i.code}}`]({{rels[i.code]}})** search parameter:
{{get_conf_mods(i.code)}}

{% if i.code == '_id'%}    `GET [base]/{{i.base}}/[id]` or `GET [base]/{{i.base}}?_id=[id]`{% else %}    `GET [base]/{{i.base}}?{{i.code}}{{get_mods(i.code)}}={{get_comps(i.code)}}{{search_type[i.type]}}{{get_andors(i.code)}}`{% endif %}
{% if i.example not in nulls %}
    Example:
    {% for j in i.example.split('~') %}
      1. {{j}}
    {%- endfor %}
{% endif %}
    *Implementation Notes:* {{i.imp_note}} ([how to search by {% if i.code == '_id' %}the logical id] of the resource{% else %}{{i.type}}]{% endif %})
{% endfor %}
{%- for i in combos if i.combo_conf == 'SHALL' %}
1. {% if i.is_new %}{% raw %}{:.new-content}{% endraw %}{% endif %}**SHALL** support searching using the combination of the {% for j in i.combo.split(',') %}{{'**[`' + j + '`](' + rels[j] + ')**'}}{% if not loop.last %} and {% endif %}{%  endfor  %} search parameters:
{%- for j in i.combo.split(',') %}{{get_conf_mods(j)}}{%  endfor  %}

    `GET [base]/{{r_type}}?{%- for j in i.combo.split(',') %}{% if j in i.fixed_kv.split('=') %}{{i.fixed_kv}}{% else %}{{j + get_mods(j) + '=' + get_comps(j) + get_type(j) + get_andors(j)}}{% endif %}{%- if not loop.last %}&{% endif %}{%  endfor  %}`
{% if i.example not in nulls %}
    Example:
    {% for j in i.example.split('~') %}
      1. {{j}}
    {%- endfor %}
{% endif %}
    *Implementation Notes:* {{i.imp_note}} ([how to search by {{ i.types.split(',') | join('] and [how to search by ')}}])
{% endfor %}

{% if shoulds %}
#### Optional Search Parameters:

The following search parameter combinations **SHOULD** be supported:
{%- endif %}
{% for i in sp  if i.display and i.base_conf == "SHOULD" %}
1. {% if i.is_new %}{% raw %}{:.new-content}{% endraw %}{% endif %}**SHOULD** {% if i.description not in nulls %}{{i.description}}{% else %}support searching{% endif %} using the **[`{{i.code}}`]({{rels[i.code]}})** search parameter:
{{get_conf_mods(i.code)}}

{% if i.code == '_id'%}    `GET [base]/{{i.base}}/[id]` or `GET [base]/{{i.base}}?_id=[id]`{% else %}     `GET [base]/{{i.base}}?{{i.code}}{{get_mods(i.code)}}={{get_comps(i.code)}}{{search_type[i.type]}}{{get_andors(i.code)}}`{% endif %}
{%if i.example not in nulls %}
    Example:
    {% for j in i.example.split('~') %}
      1. {{j}}
    {%- endfor %}
{% endif %}
      *Implementation Notes:* {{i.imp_note}} ([how to search by {% if i.code == '_id' %}the logical id] of the resource{% else %}{{i.type}}]{% endif %})
{% endfor %}
{%- for i in combos if i.combo_conf == 'SHOULD' %}
1. {% if i.is_new %}{% raw %}{:.new-content}{% endraw %}{% endif %}**SHOULD** support searching using the combination of the {% for j in i.combo.split(',') %}{{'**[`' + j + '`](' + rels[j] + ')**'}}{% if not loop.last %} and {% endif %}{%  endfor  %} search parameters:
{%- for j in i.combo.split(',') %}{{get_conf_mods(j)}}{%  endfor  %}

    `GET [base]/{{r_type}}?{%- for j in i.combo.split(',') %}{% if j in i.fixed_kv.split('=') %}{{i.fixed_kv}}{% else %}{{j + get_mods(j) + '=' + get_comps(j) + get_type(j) + get_andors(j)}}{% endif %}{%- if not loop.last %}&{% endif %}{%  endfor  %}`
{% if i.example not in nulls %}
    Example:
    {% for j in i.example.split('~') %}
      1. {{j}}
    {%- endfor %}
{% endif %}
    *Implementation Notes:* {{i.imp_note}} ([how to search by {{i.types.split(',') | join('] and [how to search by ')}}])
{% endfor %}

{% if r_type == "DocumentReference" %}
  {% raw %}{%if include.category == 'clinical-note' %}{% include write-and-docref.md %}{% endif %}{% endraw %}
{% endif %}

{% if r_type == "Specimen" %}
  {% raw %}{%include specimen-include-note.md %}{% endraw %}
{% endif %}

{% if r_type == "QuestionnaireResponse" %}
  {% raw %}{%include questionnaireresponse-context-note.md %}{% endraw %}
{% endif %}

{% raw %}{% include link-list.md %}{% endraw %}
